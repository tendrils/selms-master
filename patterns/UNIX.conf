# file for definitions of unix services
#
#   DO NOT define hosts in here!!!
#


[service unix] {
    [actions] {
       Alert, warn:  email# 
       Alert rt:  nagios('nagios.auckland.ac.nz', '2bmshtr') 
       warn rt:  nagios('nagios.auckland.ac.nz', '2bmshtr'),  acc 5 min
#      warn rt:  acc 10 min, email  # accumulate for 5 minutes then send
       report : email
  }

  [realtime] {
    RE /LOGIN root REFUSED/				: Alert
  }
  [periodic] {
    RE /LOGIN root REFUSED/				: Alert
    proc rlogind & re /Connection from .* on illegal port/	: Alert
    proc rshd & RE /Connection from .* on illegal port/	: Alert
    proc uucico & RE /refused connect from .*/		: Alert
    proc tftpd & RE /refused connect from .*/		: Alert
    proc login & RE /LOGIN FAILURE.* FROM .*(root|guest|bin|uucp|adm|bbs|games|sync)/	: Alert
    proc ntpd & re /synchronized/				: drop
    proc ntpd & RE /drift/					: drop
    proc syslog-ng & RE /STATS: dropped 0/			: Drop
    proc syslog-ng & RE /^syslog-ng version \S+ going down/	: Drop
    proc syslog-ng & RE /^syslog-ng version \S+ starting/	: Drop
    proc syslog-ng & RE /^klogd shutdown succeeded/		: Drop
    proc syslog-ng & RE /^klogd startup succeeded/		: Drop
    proc syslog-ng & RE /^syslog-ng startup succeeded/		: Drop
    proc syslogd & re /^restart/			: drop
    proc syslogd & re /^syslogd startup succeeded/	: Drop
    proc syslogd & re /^klogd startup succeeded/	: drop
    proc syslogd & re /^syslogd shutdown succeeded/	: drop
    proc syslogd & re /^going down on signal 15/	: drop
  }
}

[service linux] {
  service unix
  [periodic]{
    proc anacron & re /Updated timestamp for job /	: drop
  }
}

[service dhcpd : proc ] {
  [periodic] {
    /^DHCPDISCOVER from .+: no free leases/	: count 10 "%P no free leases", drop
  }
}


[service bind9 : proc=>named] {
  [periodic] {
    RE /lame server resolving/		: Drop
    RE /zone/				: Drop
    RE /transfer/			: Drop
    RE /client 130.216/			: Drop
    RE /no IPv6/			: Drop
    RE /update forwarding denied/	: Drop
  }
}


[service stunnel: proc ] {
  [periodic] {
    RE /^stunnel connected from/	: Drop
    RE /^Connection closed/		: Drop
    /^cmdsvr connected from 127.0.0.1/	: drop
  }
}

[service ftp] {
  [periodic] {
    RE /RETR group/	: Warn
    RE /RETR passwd/	: Warn
    RE /RETR pwd.db/	: Warn
    RE /SITE EXEC/	: Warn
    RE /ANON anonymous: Login successful./	: Ignore
  }
}

[service proftpd : proc] {
  [periodic] {
    re /ANON (anonymous|ftp): login successful/		: drop
    re /USER (\w+): Login successful/			: drop
    re /FTP login timed out, disconnected/		: drop
    re /max clients per host 1/				: drop
    /Maximum login attempts \(\d+\) exceeded/		: drop
    /FTP no transfer timeout, disconnected/		: drop
    /Refused PORT [0-9,]+ \(address mismatch\)/	: drop
    re /\[([0-9.]+)\]\) - USER ([^:]+): no such user/	: count 5 "brute force from %1 on %2 ?", \
          count 5 "brute force from %1 ?" drop 
    re /MaxInstances \(\d+\) reached/			: count 5 "MaxInstances (%2) reached", drop 
    re /Limit access denies login/			: count 5 "Limit access denies", drop
    / - no such user '(\S+)'/			: count 5 "attempts on nonexistant user '%1'", drop
    /\(([^)]+)\) - SECURITY VIOLATION: root login attempted/	: count 0 "root login attempts from \'%1\'", drop
    /USER (\S+): no such user found from /		: count 5 "attempts on nonexistant user \'%1\'", drop
  }
}

[service sendmail : proc ] {
  [periodic] {
    RE /user .* attempted to run daemon/	: Alert
    RE /gethostbyaddr.*failed:/			: Drop
    RE /	Message accepted for delivery/	: Drop
    RE /relay=.*\@localhost/			: Ignore
    RE /dccifd/					: Ignore
    re /STARTTLS=client,/			: ignore
    re /\w+: (to|from)=/			: drop
  }
}

[service squid : proc ] {
  [periodic] {
    RE /not authoritative/				: Drop
    RE /dnsserver*: gethostbyaddr/			: Drop
    RE /gethostbyaddr/					: Drop
    RE /Software caused connection abort/	: count 50 "Software caused connection abort", drop
    RE /clientReadRequest: FD \d+ Invalid Request/	: Drop
    RE /parseHttpRequest: Unsupported method '(SEARCH|PROPFIND|OPTIONS)'/	: Drop
    re /sslReadServer: FD \d\d: read failure:/		: drop
    re /urlParse: Illegal character in hostname/	: drop 
    re /storeDirWriteCleanLogs: Starting.../		: drop
    re /\d+ entries written so far\./			: drop
    re /Finished.  Wrote \d+ entries\./			: drop
    re /Took .+ entries\/sec\)/				: drop
    re /accessLogRotate: Rotating/			: drop
  }
}

[service nmbd : proc] {
  [periodic]{
  }
}

[service smbd : proc] {
  [periodic]{
  }
}


[service sshd : proc] {
  [periodic]{
    /^check pass; user unknown/				: drop
    /fatal: Read from socket failed: Connection reset by peer/ 			:drop
    /^pam_unix\(sshd:auth\): check pass; user unknown/	: drop
    /^pam_unix\(sshd:auth\): authentication failure; logname=\S*.+ /		:drop
    /^input_userauth_request: invalid user /		: drop
    /^pam_succeed_if\(sshd:auth\): error retrieving information about user/	: drop
    re /^Connection closed by/				: drop
    re /^Received disconnect/				: drop
    re /^nss_ldap: reconnecting to LDAP server.../	: drop
    re /^nss_ldap: reconnected to LDAP server after 1 attempt/	: drop
    re /\/var\/log\/lastlog/				: drop
    re /Server listening on :: port/			: drop
    re /ace_dir_env is /				: drop
    re /service name is :: sshd/			: drop
    re /session opened for user /			: drop
    re /session closed for user /			: drop
    re /session closed by /				: drop
    re /^Timeout before authentication for/		: drop
    re /^Setting tty modes failed: Invalid argument/	: drop
    re /Accepted keyboard-interactive for/		: drop
    re /Accepted password for/				: drop
    re /Accepted publickey for \w+ from 130\.216\./	: drop
    re /pam_krb5: unable to determine uid\/gid for user/	: drop
    re /pam_krb5: authenticate error: Client not found in Kerberos database/	: drop
#    re /check pass; user unknown/			: drop
    re /subsystem request for sftp/			: drop
    re /^(?:Illegal|Invalid) user /			: drop
#    /^authentication failure; .+rhost=(\S+) user=(\S+)/	:\
    /^authentication failure; .+rhost=(\S+) (?:user=(\S+))?/	:\
             count 5 "Possible ssh bruteforce of '%2' # failed logins" ,\
             count 10 "Possible ssh bruteforce from %1 # failed logins", drop
    /Failed password for (?:(?:invalid|illegal) user)?\s*(\S+) from (\S+)/	:\
             count 5 "Possible ssh bruteforce of '%1' # failed logins" ,\
             count 10 "Possible ssh bruteforce from %2 # failed logins", drop
    re /^fatal: Read from socket failed:/	: count 5 'SSH read from socket failed', drop
  }
}

[service srs ] {
  [periodic] {
    proc eventprovider & re /^\[ID \d+ daemon.notice\]/	: drop
    proc eventprovider & re /monitor: re-registration succeeded/			: drop
    proc eventprovider & re /monitor: re-registration failed. is the proxy running\?/	: count  4 'srs re-registation failed'
    re /srs_register call failed/						: drop
    proc ssha_pvr & re /^new_Pipeline: Cannot register with proxy/		: drop
    proc proxy & re /^Could not upload bulk message/			: drop
    proc proxy & re /^Could not send message/				: drop
    proc proxy & re /^unhandled exception:/					: drop
    proc proxy & re /^MLM ping /						: drop
  }
}


